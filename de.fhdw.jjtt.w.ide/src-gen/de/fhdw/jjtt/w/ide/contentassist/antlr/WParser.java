/*
 * generated by Xtext 2.12.0
 */
package de.fhdw.jjtt.w.ide.contentassist.antlr;

import com.google.inject.Inject;
import de.fhdw.jjtt.w.ide.contentassist.antlr.internal.InternalWParser;
import de.fhdw.jjtt.w.services.WGrammarAccess;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class WParser extends AbstractContentAssistParser {

	@Inject
	private WGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalWParser createParser() {
		InternalWParser result = new InternalWParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getProgramAccess().getAlternatives(), "rule__Program__Alternatives");
					put(grammarAccess.getOperatorAccess().getAlternatives(), "rule__Operator__Alternatives");
					put(grammarAccess.getSequenceAccess().getP1Alternatives_0_0(), "rule__Sequence__P1Alternatives_0_0");
					put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
					put(grammarAccess.getLoopAccess().getGroup(), "rule__Loop__Group__0");
					put(grammarAccess.getSequenceAccess().getGroup(), "rule__Sequence__Group__0");
					put(grammarAccess.getAssignmentAccess().getToBeAssignedAssignment_0(), "rule__Assignment__ToBeAssignedAssignment_0");
					put(grammarAccess.getAssignmentAccess().getVarAssignment_2(), "rule__Assignment__VarAssignment_2");
					put(grammarAccess.getAssignmentAccess().getOpAssignment_3(), "rule__Assignment__OpAssignment_3");
					put(grammarAccess.getAssignmentAccess().getConstAssignment_4(), "rule__Assignment__ConstAssignment_4");
					put(grammarAccess.getVariableAccess().getNameAssignment(), "rule__Variable__NameAssignment");
					put(grammarAccess.getConstantAccess().getValueAssignment(), "rule__Constant__ValueAssignment");
					put(grammarAccess.getLoopAccess().getVarAssignment_1(), "rule__Loop__VarAssignment_1");
					put(grammarAccess.getLoopAccess().getConstAssignment_3(), "rule__Loop__ConstAssignment_3");
					put(grammarAccess.getLoopAccess().getProgAssignment_5(), "rule__Loop__ProgAssignment_5");
					put(grammarAccess.getSequenceAccess().getP1Assignment_0(), "rule__Sequence__P1Assignment_0");
					put(grammarAccess.getSequenceAccess().getP2Assignment_2(), "rule__Sequence__P2Assignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public WGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(WGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
