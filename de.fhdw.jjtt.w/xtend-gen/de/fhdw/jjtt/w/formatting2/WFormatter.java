/**
 * generated by Xtext 2.12.0
 */
package de.fhdw.jjtt.w.formatting2;

import com.google.inject.Inject;
import de.fhdw.jjtt.w.services.WGrammarAccess;
import de.fhdw.jjtt.w.w.Assignment;
import de.fhdw.jjtt.w.w.Constant;
import de.fhdw.jjtt.w.w.Loop;
import de.fhdw.jjtt.w.w.Program;
import de.fhdw.jjtt.w.w.Variable;
import java.util.Arrays;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class WFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private WGrammarAccess _wGrammarAccess;
  
  protected void _format(final Assignment assignment, @Extension final IFormattableDocument document) {
    document.<Variable>format(assignment.getToBeAssigned());
    document.<Variable>format(assignment.getVar());
    document.<Constant>format(assignment.getConst());
  }
  
  protected void _format(final Loop loop, @Extension final IFormattableDocument document) {
    document.<Variable>format(loop.getVar());
    document.<Constant>format(loop.getConst());
    document.<Program>format(loop.getProg());
  }
  
  public void format(final Object assignment, final IFormattableDocument document) {
    if (assignment instanceof XtextResource) {
      _format((XtextResource)assignment, document);
      return;
    } else if (assignment instanceof Assignment) {
      _format((Assignment)assignment, document);
      return;
    } else if (assignment instanceof Loop) {
      _format((Loop)assignment, document);
      return;
    } else if (assignment instanceof EObject) {
      _format((EObject)assignment, document);
      return;
    } else if (assignment == null) {
      _format((Void)null, document);
      return;
    } else if (assignment != null) {
      _format(assignment, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(assignment, document).toString());
    }
  }
}
