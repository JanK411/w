/**
 * generated by Xtext 2.12.0
 */
package de.fhdw.jjtt.w.w.impl;

import de.fhdw.jjtt.w.w.Assignment;
import de.fhdw.jjtt.w.w.Constant;
import de.fhdw.jjtt.w.w.Variable;
import de.fhdw.jjtt.w.w.WPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Assignment</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.fhdw.jjtt.w.w.impl.AssignmentImpl#getToBeAssigned <em>To Be Assigned</em>}</li>
 *   <li>{@link de.fhdw.jjtt.w.w.impl.AssignmentImpl#getVar <em>Var</em>}</li>
 *   <li>{@link de.fhdw.jjtt.w.w.impl.AssignmentImpl#getOp <em>Op</em>}</li>
 *   <li>{@link de.fhdw.jjtt.w.w.impl.AssignmentImpl#getConst <em>Const</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AssignmentImpl extends ProgramImpl implements Assignment
{
  /**
   * The cached value of the '{@link #getToBeAssigned() <em>To Be Assigned</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getToBeAssigned()
   * @generated
   * @ordered
   */
  protected Variable toBeAssigned;

  /**
   * The cached value of the '{@link #getVar() <em>Var</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVar()
   * @generated
   * @ordered
   */
  protected Variable var;

  /**
   * The default value of the '{@link #getOp() <em>Op</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOp()
   * @generated
   * @ordered
   */
  protected static final String OP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOp() <em>Op</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOp()
   * @generated
   * @ordered
   */
  protected String op = OP_EDEFAULT;

  /**
   * The cached value of the '{@link #getConst() <em>Const</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConst()
   * @generated
   * @ordered
   */
  protected Constant const_;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AssignmentImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return WPackage.Literals.ASSIGNMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Variable getToBeAssigned()
  {
    return toBeAssigned;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetToBeAssigned(Variable newToBeAssigned, NotificationChain msgs)
  {
    Variable oldToBeAssigned = toBeAssigned;
    toBeAssigned = newToBeAssigned;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WPackage.ASSIGNMENT__TO_BE_ASSIGNED, oldToBeAssigned, newToBeAssigned);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setToBeAssigned(Variable newToBeAssigned)
  {
    if (newToBeAssigned != toBeAssigned)
    {
      NotificationChain msgs = null;
      if (toBeAssigned != null)
        msgs = ((InternalEObject)toBeAssigned).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WPackage.ASSIGNMENT__TO_BE_ASSIGNED, null, msgs);
      if (newToBeAssigned != null)
        msgs = ((InternalEObject)newToBeAssigned).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WPackage.ASSIGNMENT__TO_BE_ASSIGNED, null, msgs);
      msgs = basicSetToBeAssigned(newToBeAssigned, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WPackage.ASSIGNMENT__TO_BE_ASSIGNED, newToBeAssigned, newToBeAssigned));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Variable getVar()
  {
    return var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVar(Variable newVar, NotificationChain msgs)
  {
    Variable oldVar = var;
    var = newVar;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WPackage.ASSIGNMENT__VAR, oldVar, newVar);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setVar(Variable newVar)
  {
    if (newVar != var)
    {
      NotificationChain msgs = null;
      if (var != null)
        msgs = ((InternalEObject)var).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WPackage.ASSIGNMENT__VAR, null, msgs);
      if (newVar != null)
        msgs = ((InternalEObject)newVar).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WPackage.ASSIGNMENT__VAR, null, msgs);
      msgs = basicSetVar(newVar, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WPackage.ASSIGNMENT__VAR, newVar, newVar));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getOp()
  {
    return op;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOp(String newOp)
  {
    String oldOp = op;
    op = newOp;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WPackage.ASSIGNMENT__OP, oldOp, op));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Constant getConst()
  {
    return const_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConst(Constant newConst, NotificationChain msgs)
  {
    Constant oldConst = const_;
    const_ = newConst;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WPackage.ASSIGNMENT__CONST, oldConst, newConst);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setConst(Constant newConst)
  {
    if (newConst != const_)
    {
      NotificationChain msgs = null;
      if (const_ != null)
        msgs = ((InternalEObject)const_).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WPackage.ASSIGNMENT__CONST, null, msgs);
      if (newConst != null)
        msgs = ((InternalEObject)newConst).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WPackage.ASSIGNMENT__CONST, null, msgs);
      msgs = basicSetConst(newConst, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WPackage.ASSIGNMENT__CONST, newConst, newConst));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case WPackage.ASSIGNMENT__TO_BE_ASSIGNED:
        return basicSetToBeAssigned(null, msgs);
      case WPackage.ASSIGNMENT__VAR:
        return basicSetVar(null, msgs);
      case WPackage.ASSIGNMENT__CONST:
        return basicSetConst(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case WPackage.ASSIGNMENT__TO_BE_ASSIGNED:
        return getToBeAssigned();
      case WPackage.ASSIGNMENT__VAR:
        return getVar();
      case WPackage.ASSIGNMENT__OP:
        return getOp();
      case WPackage.ASSIGNMENT__CONST:
        return getConst();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case WPackage.ASSIGNMENT__TO_BE_ASSIGNED:
        setToBeAssigned((Variable)newValue);
        return;
      case WPackage.ASSIGNMENT__VAR:
        setVar((Variable)newValue);
        return;
      case WPackage.ASSIGNMENT__OP:
        setOp((String)newValue);
        return;
      case WPackage.ASSIGNMENT__CONST:
        setConst((Constant)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case WPackage.ASSIGNMENT__TO_BE_ASSIGNED:
        setToBeAssigned((Variable)null);
        return;
      case WPackage.ASSIGNMENT__VAR:
        setVar((Variable)null);
        return;
      case WPackage.ASSIGNMENT__OP:
        setOp(OP_EDEFAULT);
        return;
      case WPackage.ASSIGNMENT__CONST:
        setConst((Constant)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case WPackage.ASSIGNMENT__TO_BE_ASSIGNED:
        return toBeAssigned != null;
      case WPackage.ASSIGNMENT__VAR:
        return var != null;
      case WPackage.ASSIGNMENT__OP:
        return OP_EDEFAULT == null ? op != null : !OP_EDEFAULT.equals(op);
      case WPackage.ASSIGNMENT__CONST:
        return const_ != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (op: ");
    result.append(op);
    result.append(')');
    return result.toString();
  }

} //AssignmentImpl
