/*
 * generated by Xtext 2.12.0
 */
package de.fhdw.jjtt.w.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class WGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fhdw.jjtt.w.W.Program");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSequenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLoopParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Program:
		//	Assignment | Sequence | Loop;
		@Override public ParserRule getRule() { return rule; }
		
		//Assignment | Sequence | Loop
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Assignment
		public RuleCall getAssignmentParserRuleCall_0() { return cAssignmentParserRuleCall_0; }
		
		//Sequence
		public RuleCall getSequenceParserRuleCall_1() { return cSequenceParserRuleCall_1; }
		
		//Loop
		public RuleCall getLoopParserRuleCall_2() { return cLoopParserRuleCall_2; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fhdw.jjtt.w.W.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cToBeAssignedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cToBeAssignedVariableParserRuleCall_0_0 = (RuleCall)cToBeAssignedAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarVariableParserRuleCall_2_0 = (RuleCall)cVarAssignment_2.eContents().get(0);
		private final Assignment cOpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOpOperatorParserRuleCall_3_0 = (RuleCall)cOpAssignment_3.eContents().get(0);
		private final Assignment cConstAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConstConstantParserRuleCall_4_0 = (RuleCall)cConstAssignment_4.eContents().get(0);
		
		//Assignment:
		//	toBeAssigned=Variable '=' var=Variable op=Operator const=Constant;
		@Override public ParserRule getRule() { return rule; }
		
		//toBeAssigned=Variable '=' var=Variable op=Operator const=Constant
		public Group getGroup() { return cGroup; }
		
		//toBeAssigned=Variable
		public Assignment getToBeAssignedAssignment_0() { return cToBeAssignedAssignment_0; }
		
		//Variable
		public RuleCall getToBeAssignedVariableParserRuleCall_0_0() { return cToBeAssignedVariableParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//var=Variable
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }
		
		//Variable
		public RuleCall getVarVariableParserRuleCall_2_0() { return cVarVariableParserRuleCall_2_0; }
		
		//op=Operator
		public Assignment getOpAssignment_3() { return cOpAssignment_3; }
		
		//Operator
		public RuleCall getOpOperatorParserRuleCall_3_0() { return cOpOperatorParserRuleCall_3_0; }
		
		//const=Constant
		public Assignment getConstAssignment_4() { return cConstAssignment_4; }
		
		//Constant
		public RuleCall getConstConstantParserRuleCall_4_0() { return cConstConstantParserRuleCall_4_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fhdw.jjtt.w.W.Variable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Variable:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fhdw.jjtt.w.W.Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPLUSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMINUSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Operator:
		//	PLUS | MINUS;
		@Override public ParserRule getRule() { return rule; }
		
		//PLUS | MINUS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PLUS
		public RuleCall getPLUSParserRuleCall_0() { return cPLUSParserRuleCall_0; }
		
		//MINUS
		public RuleCall getMINUSParserRuleCall_1() { return cMINUSParserRuleCall_1; }
	}
	public class PLUSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fhdw.jjtt.w.W.PLUS");
		private final Keyword cPlusSignKeyword = (Keyword)rule.eContents().get(1);
		
		//PLUS:
		//	'+';
		@Override public ParserRule getRule() { return rule; }
		
		//'+'
		public Keyword getPlusSignKeyword() { return cPlusSignKeyword; }
	}
	public class MINUSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fhdw.jjtt.w.W.MINUS");
		private final Keyword cHyphenMinusKeyword = (Keyword)rule.eContents().get(1);
		
		//MINUS:
		//	'-';
		@Override public ParserRule getRule() { return rule; }
		
		//'-'
		public Keyword getHyphenMinusKeyword() { return cHyphenMinusKeyword; }
	}
	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fhdw.jjtt.w.W.Constant");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Constant:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class LoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fhdw.jjtt.w.W.Loop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarVariableParserRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConstAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConstConstantParserRuleCall_3_0 = (RuleCall)cConstAssignment_3.eContents().get(0);
		private final Keyword cDoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cProgAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cProgProgramParserRuleCall_5_0 = (RuleCall)cProgAssignment_5.eContents().get(0);
		private final Keyword cEndwhileKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Loop:
		//	'while' var=Variable '!=' const=Constant 'do' prog=Program 'endwhile';
		@Override public ParserRule getRule() { return rule; }
		
		//'while' var=Variable '!=' const=Constant 'do' prog=Program 'endwhile'
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//var=Variable
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }
		
		//Variable
		public RuleCall getVarVariableParserRuleCall_1_0() { return cVarVariableParserRuleCall_1_0; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_2() { return cExclamationMarkEqualsSignKeyword_2; }
		
		//const=Constant
		public Assignment getConstAssignment_3() { return cConstAssignment_3; }
		
		//Constant
		public RuleCall getConstConstantParserRuleCall_3_0() { return cConstConstantParserRuleCall_3_0; }
		
		//'do'
		public Keyword getDoKeyword_4() { return cDoKeyword_4; }
		
		//prog=Program
		public Assignment getProgAssignment_5() { return cProgAssignment_5; }
		
		//Program
		public RuleCall getProgProgramParserRuleCall_5_0() { return cProgProgramParserRuleCall_5_0; }
		
		//'endwhile'
		public Keyword getEndwhileKeyword_6() { return cEndwhileKeyword_6; }
	}
	public class SequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fhdw.jjtt.w.W.Sequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cP1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cP1Alternatives_0_0 = (Alternatives)cP1Assignment_0.eContents().get(0);
		private final RuleCall cP1AssignmentParserRuleCall_0_0_0 = (RuleCall)cP1Alternatives_0_0.eContents().get(0);
		private final RuleCall cP1LoopParserRuleCall_0_0_1 = (RuleCall)cP1Alternatives_0_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cP2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cP2ProgramParserRuleCall_2_0 = (RuleCall)cP2Assignment_2.eContents().get(0);
		
		//Sequence:
		//	p1=(Assignment | Loop) ';' p2=Program;
		@Override public ParserRule getRule() { return rule; }
		
		//p1=(Assignment | Loop) ';' p2=Program
		public Group getGroup() { return cGroup; }
		
		//p1=(Assignment | Loop)
		public Assignment getP1Assignment_0() { return cP1Assignment_0; }
		
		//(Assignment | Loop)
		public Alternatives getP1Alternatives_0_0() { return cP1Alternatives_0_0; }
		
		//Assignment
		public RuleCall getP1AssignmentParserRuleCall_0_0_0() { return cP1AssignmentParserRuleCall_0_0_0; }
		
		//Loop
		public RuleCall getP1LoopParserRuleCall_0_0_1() { return cP1LoopParserRuleCall_0_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
		
		//p2=Program
		public Assignment getP2Assignment_2() { return cP2Assignment_2; }
		
		//Program
		public RuleCall getP2ProgramParserRuleCall_2_0() { return cP2ProgramParserRuleCall_2_0; }
	}
	
	
	private final ProgramElements pProgram;
	private final AssignmentElements pAssignment;
	private final VariableElements pVariable;
	private final OperatorElements pOperator;
	private final PLUSElements pPLUS;
	private final MINUSElements pMINUS;
	private final ConstantElements pConstant;
	private final LoopElements pLoop;
	private final SequenceElements pSequence;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public WGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pAssignment = new AssignmentElements();
		this.pVariable = new VariableElements();
		this.pOperator = new OperatorElements();
		this.pPLUS = new PLUSElements();
		this.pMINUS = new MINUSElements();
		this.pConstant = new ConstantElements();
		this.pLoop = new LoopElements();
		this.pSequence = new SequenceElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.fhdw.jjtt.w.W".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	Assignment | Sequence | Loop;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Assignment:
	//	toBeAssigned=Variable '=' var=Variable op=Operator const=Constant;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//Variable:
	//	name=ID;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Operator:
	//	PLUS | MINUS;
	public OperatorElements getOperatorAccess() {
		return pOperator;
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//PLUS:
	//	'+';
	public PLUSElements getPLUSAccess() {
		return pPLUS;
	}
	
	public ParserRule getPLUSRule() {
		return getPLUSAccess().getRule();
	}
	
	//MINUS:
	//	'-';
	public MINUSElements getMINUSAccess() {
		return pMINUS;
	}
	
	public ParserRule getMINUSRule() {
		return getMINUSAccess().getRule();
	}
	
	//Constant:
	//	value=INT;
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}
	
	//Loop:
	//	'while' var=Variable '!=' const=Constant 'do' prog=Program 'endwhile';
	public LoopElements getLoopAccess() {
		return pLoop;
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}
	
	//Sequence:
	//	p1=(Assignment | Loop) ';' p2=Program;
	public SequenceElements getSequenceAccess() {
		return pSequence;
	}
	
	public ParserRule getSequenceRule() {
		return getSequenceAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
