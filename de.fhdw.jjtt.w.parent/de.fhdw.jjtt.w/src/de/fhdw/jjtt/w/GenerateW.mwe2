module de.fhdw.jjtt.w.GenerateW

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

var rootPath = ".."
var projectName = "de.fhdw.jjtt.w"

Workflow {

	bean = org.eclipse.emf.mwe.utils.StandaloneSetup {
		scanClassPath = true
		platformUri = rootPath
	}

	component = org.eclipse.emf.mwe2.ecore.EcoreGenerator {
		genModel = "platform:/resource/${projectName}/model/custom/W.genmodel"
		srcPath = "platform:/resource/${projectName}/src"
	}
	component = XtextGenerator {
		configuration = {
			project = StandardProjectConfig {
				baseName = "de.fhdw.jjtt.w"
				rootPath = rootPath
				runtimeTest = {
					enabled = true
				}
				eclipsePlugin = {
					enabled = true
				}
				eclipsePluginTest = {
					enabled = true
				}
				createEclipseMetaData = true
			}
			code = {
				encoding = "UTF-8"
				lineDelimiter = "\n"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
			}
		}

		language = StandardLanguage {
			name = "de.fhdw.jjtt.w.W"
			fileExtensions = "w"
			referencedResource = "platform:/resource/${projectName}/model/custom/W.genmodel"
//			TODO herausfinden wofür die fragments da sind ~ oder halt eben auch nicht (:
//			ok, scheinbar tatsächlich gar nicht -> nachdem es zu Jans belustigung geführt hat, darf er das gern löschen <3
//			fragment = ecore2xtext.Ecore2XtextValueConverterServiceFragment2 auto-inject {}
//			fragment = org.eclipse.xtext.generator.adapter.FragmentAdapter {
//				fragment = org.eclipse.xtext.generator.ecore2xtext.FormatterFragment {}
//			}

			formatter = {
				generateStub = true
			}
			parserGenerator = {
				options = {
					ignoreCase = true
					backtrack = true
				}
			}
			serializer = {
				generateStub = false
			}
			validator = {
			// composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}
		}
	}
}
