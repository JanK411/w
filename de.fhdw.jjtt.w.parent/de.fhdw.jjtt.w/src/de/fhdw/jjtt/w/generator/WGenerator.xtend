/*
 * 0 * generated by Xtext 2.13.0
 */
package de.fhdw.jjtt.w.generator

import de.fhdw.jjtt.w.w.Assignment
import de.fhdw.jjtt.w.w.Loop
import de.fhdw.jjtt.w.w.NamedProgram
import de.fhdw.jjtt.w.w.Reference
import de.fhdw.jjtt.w.w.Sequence
import java.util.List
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

import static extension de.fhdw.jjtt.w.XUtils.*
import java.util.stream.Collectors

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class WGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val path = resource.URI.path
		val fileName = path.substring(path.lastIndexOf('/') + 1, path.length - 2)
		val content = '''
			import turingmaschine.*;
			import turingmaschine.band.*;
			
			
			public class «fileName» {
				«FOR p : resource.allContents.toIterable.filter(NamedProgram)»
					«generateNamedProgram(p)»
				«ENDFOR»
			}
		'''
		fsa.generateFile('''../src/main/java/«fileName».java''', content)
	}

	def String generateNamedProgram(NamedProgram program) {
		if (program.name == "main" && program.params.size == 0) {
			'''
			public static void main(String[] args) {
				«declareVariables(program.program.variables)»
				«generateProgram(program.program)».simuliere();
				«printAllVariables(program.program.variables)»
			}'''
		} else {
			'''
			public static TuringMaschineMitBand create«program.getName.toFirstUpper»(«program.params.map["ChangeableBand "+it.name].join(", ")») {
				«declareVariables(program.program.variables.filter[!program.params.map[it.name].contains(it)].toList)»
				return «generateProgram(program.getProgram)»;
			}'''
		}
	}

	def printAllVariables(List<String> strings) {
		'''«FOR s : strings.stream.distinct.collect(Collectors.toList)»
		System.out.println("«s»" + " = " + «s»);
		«ENDFOR»'''
	}

	def declareVariables(List<String> list) {
		val ret = new StringBuilder;
		list.stream.distinct.forEach [
			it -> {
				ret.append('''ChangeableBand «it» = ChangeableBand.create();''')
				ret.append("\n")
			}
		]
		ret
	}

	def dispatch String generateProgram(Reference reference) {
		'''«IF reference.isInBuild»TuringMaschinen.«ENDIF»create«reference.name.toFirstUpper»(«reference.params.map[it.valueHavingThingToString].join(", ")»)'''
	}

	def dispatch String generateProgram(Assignment assignment) {
		'''TuringMaschinen.create«IF assignment.op == "+"»Add«ENDIF»«IF assignment.op == "-"»Sub«ENDIF»(«assignment.val1.valueHavingThingToString», «assignment.val2.valueHavingThingToString», «assignment.toBeAssigned.name»)'''
	}

	def dispatch String generateProgram(Loop loop) {
		'''TuringMaschinen.createWhile(«loop.^var.valueHavingThingToString», «generateProgram(loop.prog)»)'''
	}

	def dispatch String generateProgram(Sequence sequence) {
		'''
		TuringMaschinen.createSeq(
				«generateProgram(sequence.p1)»,
				«generateProgram(sequence.p2)»
		)'''
	}

}
