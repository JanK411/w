/*
 * 0 * generated by Xtext 2.13.0
 */
package de.fhdw.jjtt.w.generator

import de.fhdw.jjtt.w.w.Assignment
import de.fhdw.jjtt.w.w.Loop
import de.fhdw.jjtt.w.w.NamedProgram
import de.fhdw.jjtt.w.w.Sequence
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import de.fhdw.jjtt.w.w.File

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class WGenerator extends AbstractGenerator {
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val path = resource.URI.path
		val fileName = path.substring(path.lastIndexOf('/') + 1, path.length - 2)
		val content = '''
			public class «fileName» {
				«FOR p : resource.allContents.toIterable.filter(NamedProgram)»
					«generateNamedProgram(p)»
				«ENDFOR»
			}
		'''
		fsa.generateFile('''«fileName».java''', content)
	}

	def String generateNamedProgram(NamedProgram program) {
		'''public void «program.getName»(«FOR p : program.getParams»«p.getName»«ENDFOR») {
			«generateUnnamedProgram(program.getProgram)»
		}'''
	}

	def dispatch String generateUnnamedProgram(Assignment assignment) {
		if (assignment.op == '+') {
			'''TouringMachine.createAdditionTouringMachine(«assignment.val1», «assignment.val2»)'''
		} else if (assignment.op == '-') {
			""
		} else {
			throw new UnsupportedOperationException('''The Operator [«assignment.op»] couldn't be parsed.''')
		}
	}

	def dispatch String generateUnnamedProgram(Loop loop) {
	}

	def dispatch String generateUnnamedProgram(Sequence sequence) {
	}
}
