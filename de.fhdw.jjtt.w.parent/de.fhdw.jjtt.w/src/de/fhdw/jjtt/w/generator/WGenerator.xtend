/*
 * generated by Xtext 2.13.0
 */
package de.fhdw.jjtt.w.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.emf.ecore.EObject
import de.fhdw.jjtt.w.w.UnnamedProgram
import de.fhdw.jjtt.w.w.NamedProgram
import de.fhdw.jjtt.w.w.Sequence
import de.fhdw.jjtt.w.w.Program

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class WGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))
		val path = resource.URI.path
		val fileName = path.substring(path.lastIndexOf('/') + 1, path.length - 2)
		val content = '''
			public class «fileName» {
				«FOR p : resource.allContents.toIterable.filter(Program)»
					«generateNamedProgram(p)»
				«ENDFOR»
			}
		'''
		fsa.generateFile('''«fileName».java''', content)
	}

	def String generateNamedProgram(Program program) {
		'''public void «program»'''
	}

}
