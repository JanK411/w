/*
 * generated by Xtext 2.13.0
 */
parser grammar InternalWParser;

options {
	tokenVocab=InternalWLexer;
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
}

@header {
package de.fhdw.jjtt.w.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.fhdw.jjtt.w.services.WGrammarAccess;

}

@members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

 	private WGrammarAccess grammarAccess;

    public InternalWParser(TokenStream input, WGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected WGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getProgramAccess().getAssignmentParserRuleCall_0());
		}
		this_Assignment_0=ruleAssignment
		{
			$current = $this_Assignment_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getProgramAccess().getSequenceParserRuleCall_1());
		}
		this_Sequence_1=ruleSequence
		{
			$current = $this_Sequence_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getProgramAccess().getLoopParserRuleCall_2());
		}
		this_Loop_2=ruleLoop
		{
			$current = $this_Loop_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	iv_ruleAssignment=ruleAssignment
	{ $current=$iv_ruleAssignment.current; }
	EOF;

// Rule Assignment
ruleAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentAccess().getToBeAssignedVariableParserRuleCall_0_0());
				}
				lv_toBeAssigned_0_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentRule());
					}
					set(
						$current,
						"toBeAssigned",
						lv_toBeAssigned_0_0,
						"de.fhdw.jjtt.w.W.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=EqualsSign
		{
			newLeafNode(otherlv_1, grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentAccess().getVarVariableParserRuleCall_2_0());
				}
				lv_var_2_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentRule());
					}
					set(
						$current,
						"var",
						lv_var_2_0,
						"de.fhdw.jjtt.w.W.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentAccess().getOpOperatorParserRuleCall_3_0());
				}
				lv_op_3_0=ruleOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentRule());
					}
					set(
						$current,
						"op",
						lv_op_3_0,
						"de.fhdw.jjtt.w.W.Operator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentAccess().getConstConstantParserRuleCall_4_0());
				}
				lv_const_4_0=ruleConstant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentRule());
					}
					set(
						$current,
						"const",
						lv_const_4_0,
						"de.fhdw.jjtt.w.W.Constant");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVariableRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleOperator
entryRuleOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOperatorRule()); }
	iv_ruleOperator=ruleOperator
	{ $current=$iv_ruleOperator.current.getText(); }
	EOF;

// Rule Operator
ruleOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOperatorAccess().getPLUSParserRuleCall_0());
		}
		this_PLUS_0=rulePLUS
		{
			$current.merge(this_PLUS_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperatorAccess().getMINUSParserRuleCall_1());
		}
		this_MINUS_1=ruleMINUS
		{
			$current.merge(this_MINUS_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePLUS
entryRulePLUS returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPLUSRule()); }
	iv_rulePLUS=rulePLUS
	{ $current=$iv_rulePLUS.current.getText(); }
	EOF;

// Rule PLUS
rulePLUS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=PlusSign
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getPLUSAccess().getPlusSignKeyword());
	}
;

// Entry rule entryRuleMINUS
entryRuleMINUS returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMINUSRule()); }
	iv_ruleMINUS=ruleMINUS
	{ $current=$iv_ruleMINUS.current.getText(); }
	EOF;

// Rule MINUS
ruleMINUS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=HyphenMinus
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getMINUSAccess().getHyphenMinusKeyword());
	}
;

// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	iv_ruleConstant=ruleConstant
	{ $current=$iv_ruleConstant.current; }
	EOF;

// Rule Constant
ruleConstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_INT
			{
				newLeafNode(lv_value_0_0, grammarAccess.getConstantAccess().getValueINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getConstantRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleLoop
entryRuleLoop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLoopRule()); }
	iv_ruleLoop=ruleLoop
	{ $current=$iv_ruleLoop.current; }
	EOF;

// Rule Loop
ruleLoop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=While
		{
			newLeafNode(otherlv_0, grammarAccess.getLoopAccess().getWhileKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLoopAccess().getVarVariableParserRuleCall_1_0());
				}
				lv_var_1_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLoopRule());
					}
					set(
						$current,
						"var",
						lv_var_1_0,
						"de.fhdw.jjtt.w.W.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=ExclamationMarkEqualsSign
		{
			newLeafNode(otherlv_2, grammarAccess.getLoopAccess().getExclamationMarkEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLoopAccess().getConstConstantParserRuleCall_3_0());
				}
				lv_const_3_0=ruleConstant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLoopRule());
					}
					set(
						$current,
						"const",
						lv_const_3_0,
						"de.fhdw.jjtt.w.W.Constant");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=Do
		{
			newLeafNode(otherlv_4, grammarAccess.getLoopAccess().getDoKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLoopAccess().getProgProgramParserRuleCall_5_0());
				}
				lv_prog_5_0=ruleProgram
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLoopRule());
					}
					set(
						$current,
						"prog",
						lv_prog_5_0,
						"de.fhdw.jjtt.w.W.Program");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=Endwhile
		{
			newLeafNode(otherlv_6, grammarAccess.getLoopAccess().getEndwhileKeyword_6());
		}
	)
;

// Entry rule entryRuleSequence
entryRuleSequence returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSequenceRule()); }
	iv_ruleSequence=ruleSequence
	{ $current=$iv_ruleSequence.current; }
	EOF;

// Rule Sequence
ruleSequence returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSequenceAccess().getP1AssignmentParserRuleCall_0_0_0());
					}
					lv_p1_0_1=ruleAssignment
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSequenceRule());
						}
						set(
							$current,
							"p1",
							lv_p1_0_1,
							"de.fhdw.jjtt.w.W.Assignment");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getSequenceAccess().getP1LoopParserRuleCall_0_0_1());
					}
					lv_p1_0_2=ruleLoop
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSequenceRule());
						}
						set(
							$current,
							"p1",
							lv_p1_0_2,
							"de.fhdw.jjtt.w.W.Loop");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_1=Semicolon
		{
			newLeafNode(otherlv_1, grammarAccess.getSequenceAccess().getSemicolonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSequenceAccess().getP2ProgramParserRuleCall_2_0());
				}
				lv_p2_2_0=ruleProgram
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSequenceRule());
					}
					set(
						$current,
						"p2",
						lv_p2_2_0,
						"de.fhdw.jjtt.w.W.Program");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;
