/*
 * generated by Xtext 2.13.0
 */
package de.fhdw.jjtt.w.tests

import com.google.inject.Inject
import de.fhdw.jjtt.w.generator.WGenerator
import de.fhdw.jjtt.w.w.File
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper

import static org.junit.Assert.*
import org.junit.Test
import org.junit.runner.RunWith

import static extension de.fhdw.jjtt.w.XUtils.*

@RunWith(XtextRunner)
@InjectWith(WInjectorProvider)
class WParsingTest {
	@Inject
	ParseHelper<File> parseHelper
	var gen = new WGenerator()

	@Test
	def testAddierer() {
		val input = parseHelper.parse('''
		main() {
			x = 5 + 3;
			y = 6 - x;
		}''')

		val main = gen.generateNamedProgram(input.programs.findFirst[it.name == "main"])
		println(main)

		val expected = '''public static void main(String[] args) {
			ChangeableBand x = ChangeableBand.create();
			ChangeableBand y = ChangeableBand.create();
			TuringMaschinen.createSeq(
				TuringMaschinen.createAdd(ChangeableBand.create("5"), ChangeableBand.create("3"), x)),
				TuringMaschinen.createSub(ChangeableBand.create("6"), x, y))
			)
			.simuliere();
		}'''

		assertEquals(expected.trimWhitespaces, main.trimWhitespaces);

	}

	@Test
	def testMultiply() {
		val input = parseHelper.parse('''
		multiply(f1, f2) {
			copy(f1, f11);
			copy(f2, f21);
				while f21 !=0 do
					f1 = f1 + f11;
					f21 = f21 - 1
				endwhile
		}''')

		val main = gen.generateNamedProgram(input.programs.findFirst[it.name == "multiply"])
		println(main)

		val expected = '''public static void main(String[] args) {
			ChangeableBand x = ChangeableBand.create();
			ChangeableBand y = ChangeableBand.create();
			TuringMaschinen.createSeq(
				TuringMaschinen.createAdd(ChangeableBand.create("5"), ChangeableBand.create("3"), x)),
				TuringMaschinen.createSub(ChangeableBand.create("6"), x, y))
			)
			.simuliere();
		}'''

		assertEquals(expected.trimWhitespaces, main.trimWhitespaces);

	}

	@Test
	def loadModel() {
		val result = parseHelper.parse('''
		main() {
			x = 5 + 0;
			y = 3 + 0;
			multiply(x, y)
		}
		
		multiply(f1, f2) {
			copy(f1, f11);
			copy(f2, f21);
			while f21 !=0 do
				f1 = f1 + f11;
				f21 = f21 - 1
			endwhile
		}''')

		assertEquals(2, result.programs)
		assertNotNull(result.programs.findFirst[it.name == "main"])
		assertNotNull(result.programs.findFirst[it.name == "multiply"])

//		val main = gen.generateProgram(result.programs.findFirst[it.name == "main"])
		val expectedMain = '''
		public static void main(String[] args) {
			Band x = Band.create();
			Band y = Band.create();
			TouringMachine.createSeq(
				TouringMachine.createAdd(5,0,x),
				TouringMachine.createSeq(
					TouringMachine.createAdd(3,0,y),
					createMultiplyMachine(x, y))
				)
			).run();
		}'''
//		Assert.assertEquals(expectedMain.trim, main.trim)
//		val multiply = gen.generateProgram(result.programs.findFirst[it.name == "multiply"])
		val expectedMultiply = '''
		public TouringMachine createMultiplyMachine(Band f1, Band f2) {
			Band f11 = Band.create();
			Band f21 = Band.create();
			return TouringMachine.createSeq(
				TouringMachine.createCopy(f1, f11),
				TouringMachine.createSeq(
					TouringMachine.createCopy(f2, f21)
					TouringMachine.createWhile(f21, TouringMachine.createSeq(
						TouringMachine.createAdd(f1, f11, f1),
						TouringMachine.createSub(f21, Band.create(1), f21)
					))
				)
			)
		}'''
//		Assert.assertEquals(expectedMultiply.trim, multiply.trim)
	}
}
